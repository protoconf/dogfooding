syntax = "proto3";

// Provider: kubernetes 2
package terraform.kubernetes.resources.v2;

import "google/protobuf/struct.proto";

import "terraform/v1/meta.proto";

// KubernetesSecret version is 0
message KubernetesSecret {
  // A map of the secret data in base64 encoding. Use this for binary data.
  map<string, string> binary_data = 1 [json_name = "binary_data"];

  // A map of the secret data.
  map<string, string> data = 2;

  string id = 3;

  // Ensures that data stored in the Secret cannot be updated (only object metadata
  // can be modified).
  bool immutable = 4;

  // Type of secret
  string type = 5;

  // Terraform will wait for the service account token to be created.
  bool wait_for_service_account_token = 6 [json_name = "wait_for_service_account_token"];

  Metadata metadata = 7;

  repeated Timeouts timeouts = 8;

  google.protobuf.Value for_each = 9 [json_name = "for_each"];

  repeated string depends_on = 10 [json_name = "depends_on"];

  int32 count = 11;

  string provider = 12;

  terraform.v1.Lifecycle lifecycle = 13;

  message Metadata {
    // An unstructured key value map stored with the secret that may be used to store
    // arbitrary metadata. More info:
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field
    // has not been provided. This value will also be combined with a unique suffix.
    // More info:
    // ty/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope
    // and select) the secret. May match selectors of replication controllers and
    // services. More info:
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    map<string, string> labels = 4;

    // Name of the secret, must be unique. Cannot be updated. More info:
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 5;

    // Namespace defines the space within which name of the secret must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this secret that can be
    // used by clients to determine when secret has changed. More info:
    // ors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this secret. More info:
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    string uid = 8;
  }

  message Timeouts {
    string create = 1;
  }
}

// KubernetesSecretV1 version is 0
message KubernetesSecretV1 {
  // A map of the secret data in base64 encoding. Use this for binary data.
  map<string, string> binary_data = 1 [json_name = "binary_data"];

  // A map of the secret data.
  map<string, string> data = 2;

  string id = 3;

  // Ensures that data stored in the Secret cannot be updated (only object metadata
  // can be modified).
  bool immutable = 4;

  // Type of secret
  string type = 5;

  // Terraform will wait for the service account token to be created.
  bool wait_for_service_account_token = 6 [json_name = "wait_for_service_account_token"];

  Metadata metadata = 7;

  repeated Timeouts timeouts = 8;

  google.protobuf.Value for_each = 9 [json_name = "for_each"];

  repeated string depends_on = 10 [json_name = "depends_on"];

  int32 count = 11;

  string provider = 12;

  terraform.v1.Lifecycle lifecycle = 13;

  message Metadata {
    // An unstructured key value map stored with the secret that may be used to store
    // arbitrary metadata. More info:
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field
    // has not been provided. This value will also be combined with a unique suffix.
    // More info:
    // ty/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope
    // and select) the secret. May match selectors of replication controllers and
    // services. More info:
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    map<string, string> labels = 4;

    // Name of the secret, must be unique. Cannot be updated. More info:
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 5;

    // Namespace defines the space within which name of the secret must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this secret that can be
    // used by clients to determine when secret has changed. More info:
    // ors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this secret. More info:
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    string uid = 8;
  }

  message Timeouts {
    string create = 1;
  }
}
