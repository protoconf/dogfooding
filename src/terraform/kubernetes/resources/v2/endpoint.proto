syntax = "proto3";

// Provider: kubernetes 2
package terraform.kubernetes.resources.v2;

import "google/protobuf/struct.proto";

import "terraform/v1/meta.proto";

// KubernetesEndpointSliceV1 version is 0
message KubernetesEndpointSliceV1 {
  // address_type specifies the type of address carried by this EndpointSlice. All
  // addresses in this slice must be the same type. This field is immutable after
  // creation.
  string address_type = 1 [json_name = "address_type"];

  string id = 2;

  repeated Endpoint endpoint = 3;

  Metadata metadata = 4;

  repeated Port port = 5;

  google.protobuf.Value for_each = 6 [json_name = "for_each"];

  repeated string depends_on = 7 [json_name = "depends_on"];

  int32 count = 8;

  string provider = 9;

  terraform.v1.Lifecycle lifecycle = 10;

  message Endpoint {
    // addresses of this endpoint. The contents of this field are interpreted according
    // to the corresponding EndpointSlice addressType field.
    repeated string addresses = 1;

    // hostname of this endpoint. This field may be used by consumers of endpoints to
    // distinguish endpoints from each other.
    string hostname = 2;

    // nodeName represents the name of the Node hosting this endpoint. This can be used
    // to determine endpoints local to a Node.
    string node_name = 3 [json_name = "node_name"];

    // zone is the name of the Zone this endpoint exists in.
    string zone = 4;

    Condition condition = 5;

    TargetRef target_ref = 6 [json_name = "target_ref"];

    message Condition {
      // ready indicates that this endpoint is prepared to receive traffic, according to
      // whatever system is managing the endpoint.
      bool ready = 1;

      // serving is identical to ready except that it is set regardless of the terminating
      // state of endpoints.
      bool serving = 2;

      // terminating indicates that this endpoint is terminating.
      bool terminating = 3;
    }

    message TargetRef {
      // If referring to a piece of an object instead of an entire object, this string
      // should contain a valid JSON/Go field access statement, such as
      // desiredState.manifest.containers[2].
      string field_path = 1 [json_name = "field_path"];

      // Name of the referent.
      string name = 2;

      // Namespace of the referent.
      string namespace = 3;

      // Specific resourceVersion to which this reference is made, if any.
      string resource_version = 4 [json_name = "resource_version"];

      // If referring to a piece of an object instead of an entire object, this string
      // should contain a valid JSON/Go field access statement, such as
      // desiredState.manifest.containers[2].
      string uid = 5;
    }
  }

  message Metadata {
    // An unstructured key value map stored with the endpoint_slice that may be used to
    // store arbitrary metadata. More info:
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field
    // has not been provided. This value will also be combined with a unique suffix.
    // More info:
    // ty/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope
    // and select) the endpoint_slice. May match selectors of replication controllers
    // and services. More info:
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    map<string, string> labels = 4;

    // Name of the endpoint_slice, must be unique. Cannot be updated. More info:
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 5;

    // Namespace defines the space within which name of the endpoint_slice must be
    // unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this endpoint_slice that
    // can be used by clients to determine when endpoint_slice has changed. More info:
    // ors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this endpoint_slice. More info:
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    string uid = 8;
  }

  message Port {
    // The application protocol for this port. This is used as a hint for
    // implementations to offer richer behavior for protocols that they understand.
    string app_protocol = 1 [json_name = "app_protocol"];

    // name represents the name of this port. All ports in an EndpointSlice must have a
    // unique name.
    string name = 2;

    // port represents the port number of the endpoint.
    string port = 3;

    // protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP.
    // Default is TCP.
    string protocol = 4;
  }
}
